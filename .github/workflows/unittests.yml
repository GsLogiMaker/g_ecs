
name: Run Unit Tests

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  LINUX_64_TARGET: x86_64-unknown-linux-gnu

jobs:
  unittests_linux_x86_64:

    runs-on: ubuntu-latest

    steps:
    - name: 🐙 Initialize git
      uses: actions/checkout@v4

    - name: 🐙 Initialize submodules
      run: git submodule update --init --recursive

    - uses: Swatinem/rust-cache@v2
      with:
        workspaces: "./addons/glecs/rust/glecs"
        cache-on-failure: true

    - name: 🦀 Update Rust
      env:
        TARGET: ${{ env.LINUX_64_TARGET }}
      run: |
        rustup update
        rustup target add ${TARGET}

    - name: 🦀 Build Rust code
      run: |
        cargo build \
          --manifest-path ./addons/glecs/rust/glecs/Cargo.toml \
          --features compile_bindings \
          --target-dir ./addons/glecs/bin
        
        # Copy library for use in test suite
        cp ./addons/glecs/bin/${TARGET}/release ./addons/glecs/bin/debug -r
    
    - name: 🤖 Setup Godot
      uses: chickensoft-games/setup-godot@v1
      with:
        # Version must include major, minor, and patch, and be >= 4.0.0
        version: 4.2.1
        mono: false
      

      # This shouldn't be needed because the important files from .godot are
      # included, but we run the import process just in case.
    - name: 📧 Run Godot import
      run: |
        godot --headless --editor --quit-after 100

    - name: ✏️ Run unittests
      run: |
        godot -s res://addons/gut/gut_cmdln.gd --headless -gdir="res://unittests" -gexit

    - name: Cache compiled library
      uses: actions/cache/save@v4.0.2
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: ./addons/glecs/bin/${{ env.TARGET }}/release
        # An explicit key for restoring and saving the cache
        key: glecslib.${{ env.TARGET }}
        # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
        enableCrossOsArchive: true
                

  update_nightly:

    needs: unittests_linux_x86_64
    runs-on: windows-latest

    steps:

      - name: 📍 Run only if new commits were pushed
        if: ${{ github.action }} != "push"
        run: |
          exit 0

      - name: 🐙 Initialize git
        uses: actions/checkout@v4

      - name: 🐧 Load compiled library, Linux x86_64
        uses: actions/cache/restore@v4.0.2
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: ./addons/glecs/bin/${{ env.LINUX_64_TARGET }}/release
          # An explicit key for restoring and saving the cache
          key: glecslib.${{ env.LINUX_64_TARGET }}
          # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
          enableCrossOsArchive: true
      
      - name: 🤖 Setup Godot
        uses: chickensoft-games/setup-godot@v1
        with:
          # Version must include major, minor, and patch, and be >= 4.0.0
          version: 4.2.1
          mono: false

      - name: 🚣‍♂️ Convert dev plugin to nightly format
        run: |
          godot -s ./addons/glecs/_build_for_nightly.gd

      - name: 🌙 Clone nightly branch
        env:
          REPO: ${{ github.repository }}
        run: |
          git clone ${{ github.repository }} ../nightly -b nightly
      
      - name: 🖨️ Copy dev branch plugin to nightly branch
        run: |
          cp ./addons/glecs/ ../nightly
      
      - name: 📤 Commit to nightly branch
        run: |
          cd ../nightly
          git commit --all -m "AUTO ${{ github.event.head_commit.message }}"
