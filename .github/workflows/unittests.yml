
name: Build Process

on:
  push:
    branches: [ "dev", "cpp" ]
  pull_request:
    branches: [ "dev", "cpp" ]
  workflow_dispatch:

jobs:

  compile_glecs:
    strategy:
      matrix:
        include:
          # Linux
          - platform: linux
            arch: x86_64
            glecs_lib: libglecs.linux.template_debug.x86_64.so
            os: ubuntu-latest
          # - platform: linux
          #   arc: arm64
          #   target: i686-unknown-linux-gnu
          #   glecs_lib: libglecs.linux.template_debug.arm64.so
          #   os: ubuntu-latest
          # # Mac
          # - target: aarch64-apple-darwin
          #   os: macos-latest
          #   glecs_lib: libglecs.dylib
          # - target: x86_64-apple-darwin
          #   os: macos-latest
          #   glecs_lib: libglecs.dylib
          # Windows
          - platform: windows
            arch: x86_64
            glecs_lib: libglecs.windows.template_debug.x86_64.dll
            os: windows-latest
    runs-on: ${{ matrix.os }}
    outputs:
      # Linux
      bin_key_linux_x86_64: ${{ steps.set_cache_key.outputs.bin_key_linux_x86_64 }}
      # i686-linux_bin_key: ${{ steps.set_cache_key.outputs.i686-unknown-linux-gnu_bin_key }}
      # Mac
      # aarch64-mac_bin_key: ${{ steps.set_cache_key.outputs.x86_64-apple-darwin_bin_key }}
      # x86_64-mac_bin_key: ${{ steps.set_cache_key.outputs.aarch64-apple-darwin_bin_key }}
      # Windows
      bin_key_windows_x86_64: ${{ steps.set_cache_key.outputs.bin_key_windows_x86_64 }}
    steps:
    - name: üêô Setup git environment
      uses: actions/checkout@v4

    - name: üó≥Ô∏è Initialize git submodules
      run: git submodule update --init --recursive

    - name: Python install
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    # --- Define keys ---

    - name: üèîÔ∏è Define library cache key in env Linux
      # if: ${{ matrix.platform == 'linux'}}
      shell: bash
      run: echo "bin_key=lib.${{ matrix.platform }}_${{ matrix.arch }}.${{ hashFiles('addons/glecs/bin') }}" >> $GITHUB_ENV

    - name: üèîÔ∏è Define cpp cache key Linux
      # if: ${{ matrix.platform == 'linux'}}
      shell: bash
      run: echo "cpp_key=cpp.${{ matrix.platform }}_${{ matrix.arch }}.${{ hashFiles('addons/glecs/cpp/') }}" >> $GITHUB_ENV

    - name: üèîÔ∏è Define includes cache key Linux
      # if: ${{ matrix.platform == 'linux'}}
      shell: bash
      run: echo "include_key=include.${{ matrix.platform }}_${{ matrix.arch }}.${{ hashFiles('addons/glecs/cpp/include') }}.${{ hashFiles('addons/glecs/cpp/SConstruct') }}" >> $GITHUB_ENV

    # --- Restore caches ---

    - name: üíæ Restore cached cpp files
      uses: actions/cache/restore@v4.0.2
      with:
        path: addons/glecs/cpp
        key: ${{ env.cpp_key }}

    - name: üíæ Restore cached include files
      uses: actions/cache/restore@v4.0.2
      with:
        path: addons/glecs/cpp/include
        key: ${{ env.include_key }}

    # --- Platform specific setup ---

    # - name: üêß Install GCC multilib for Linux i686 build
    #   if: ${{ matrix.platform == 'linux' && matrix.arch == 'i686' && runner.os == 'Linux'}}
    #   run: sudo apt-get install gcc-multilib

    - name: ü™ü Install mingw for cross compiling from Linux to Windows
      if: ${{ matrix.platform == 'windows' && runner.os == 'Linux' }}
      run: |
        sudo apt install g++-mingw-w64-x86-64
        sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix

    # --- Compile Glecs ---

    - name: Install scons
      run: |
        pip install scons

    - name: Build C++ code
      run: |
        scons --directory=addons/glecs/cpp platform=${{ matrix.platform }} arch=${{ matrix.arch }}
      #target=template_release

    # --- Define bin key ---

    - name: üèîÔ∏è Define library cache key in env
      run: |
        printf "*** Setting key in env***"
        echo "bin_key=bin.${{ matrix.platform }}_${{ matrix.arch }}.${{ hashFiles('addons/glecs/bin') }}" >> $GITHUB_ENV
    - name: üèîÔ∏è Define library cache key in output
      id: set_cache_key
      run: |
        printf "*** Setting key ***"
        echo "bin_key_${{ matrix.platform }}_${{ matrix.arch }}=${{env.bin_key}}" >> $GITHUB_OUTPUT

    # --- Save caches ---

    - name: Cache cpp source build files
      uses: actions/cache/save@v4
      with:
        path: addons/glecs/cpp
        key: ${{ env.cpp_key }}

    - name: Cache cpp include build files
      uses: actions/cache/save@v4
      with:
        path: addons/glecs/cpp/include
        key: ${{ env.include_key }}

    - name: üíæ Cache bin
      uses: actions/cache/save@v4.0.2
      with:
        path: ./addons/glecs/bin/${{ matrix.glecs_lib }}
        key: ${{ env.bin_key }}
        enableCrossOsArchive: true


  run_test_suite:
    needs: compile_glecs
    runs-on: ubuntu-latest
    steps:
        - name: üêô Setup git environment
          uses: actions/checkout@v4

        - name: üíæ Load cached library as debug
          uses: actions/cache/restore@v4.0.2
          with:
            path: ./addons/glecs/bin/libglecs.linux.template_debug.x86_64.so
            key: ${{ needs.compile_glecs.outputs.bin_key_linux_x86_64 }}
            enableCrossOsArchive: true
        - name: üíæ Load cached library as release
          uses: actions/cache/restore@v4.0.2
          with:
            path: ./addons/glecs/bin/libglecs.linux.template_release.x86_64.so
            key: ${{ needs.compile_glecs.outputs.bin_key_linux_x86_64 }}
            enableCrossOsArchive: true

        - name: ü§ñ Run Godot unit tests
          id: run-godot-tests
          uses: croconut/godot-tester@v5.1
          with:
            # required
            version: "4.3"
            is-mono: "false"
            # the folder with your project.godot file in it
            path: "./"
            # the ratio of tests that must pass for this action to pass
            # e.g. 0.6 means 60% of your tests must pass
            minimum-pass: "1.0"
            # the directory containing Gut tests
            test-dir: "res://unittests"
            # default is GUTs default: 'res://.gutconfig.json'; set this to load a different config file
            config-file: "res://.gut_editor_config.json"
            # relative path to the xml file to read / write GUT's results from, recommended
            # for direct-scene users to check this file if you have issues
            result-output-file: "test_results.xml"

        - name: üìÑ Print Godot logs
          if: failure() && steps.run-godot-tests.outcome != 'success'
          run: |
            echo ""
            echo "***"
            echo "GODOT LOG"
            echo "***"
            echo ""
            printf "$(cat logs/godot.log)\n"

            echo ""
            echo "***"
            echo "GODOT TEST RESULTS"
            echo "***"
            echo ""
            echo $(cat test_results.xml)

            echo ""
            echo "***"
            echo "LS"
            echo "***"
            ls -g -A

            echo ""
            echo "***"
            echo "LS glecs/bin/"
            echo "***"
            ls addons/glecs/bin -g -A

  # update_nightly:
  #   if: ${{ github.event_name == 'push' || github.event_name == 'closed' }}
  #   needs:  ["compile_glecs", "run_test_suite"]
  #   runs-on: windows-latest
  #   steps:
  #     - name: üêô Setup git environment
  #       uses: actions/checkout@v4
  #       with:
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         persist-credentials: false

  #     - name: üêß Load compiled library, Linux x86_64
  #       uses: actions/cache/restore@v4.0.2
  #       with:
  #         # A list of files, directories, and wildcard patterns to cache and restore
  #         path: ./addons/glecs/bin/x86_64-unknown-linux-gnu/release/libglecs.so
  #         # An explicit key for restoring and saving the cache
  #         key: ${{ needs.compile_glecs.outputs.x86_64_linux_bin_key }}
  #         # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
  #         enableCrossOsArchive: true

  #     - name: üêß Load compiled library, Linux i686
  #       uses: actions/cache/restore@v4.0.2
  #       with:
  #         # A list of files, directories, and wildcard patterns to cache and restore
  #         path: ./addons/glecs/bin/i686-unknown-linux-gnu/release/libglecs.so
  #         # An explicit key for restoring and saving the cache
  #         key: ${{ needs.compile_glecs.outputs.i686-linux_bin_key }}
  #         # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
  #         enableCrossOsArchive: true

  #     - name: üçé Load compiled library, Mac aarch64
  #       uses: actions/cache/restore@v4.0.2
  #       with:
  #         # A list of files, directories, and wildcard patterns to cache and restore
  #         path: ./addons/glecs/bin/aarch64-apple-darwin/release/libglecs.dylib
  #         # An explicit key for restoring and saving the cache
  #         key: ${{ needs.compile_glecs.outputs.aarch64-mac_bin_key }}
  #         # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
  #         enableCrossOsArchive: true

  #     - name: üçé Load compiled library, Mac x86_64
  #       uses: actions/cache/restore@v4.0.2
  #       with:
  #         # A list of files, directories, and wildcard patterns to cache and restore
  #         path: ./addons/glecs/bin/x86_64-apple-darwin/release/libglecs.dylib
  #         # An explicit key for restoring and saving the cache
  #         key: ${{ needs.compile_glecs.outputs.x86_64-mac_bin_key }}
  #         # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
  #         enableCrossOsArchive: true

  #     - name: ü™ü Load compiled library, Windows x86_64
  #       uses: actions/cache/restore@v4.0.2
  #       with:
  #         # A list of files, directories, and wildcard patterns to cache and restore
  #         path: ./addons/glecs/bin/x86_64-pc-windows-gnu/release/glecs.dll
  #         # An explicit key for restoring and saving the cache
  #         key: ${{ needs.compile_glecs.outputs.x86_64-windows_bin_key }}
  #         # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
  #         enableCrossOsArchive: true

  #     - name: üêç Setup Python
  #       uses: actions/setup-python@v5.1.0
  #       with:
  #           python-version: 3.11.2
  #           cache: pip

  #     - name: üö£‚Äç‚ôÇÔ∏è Convert dev plugin to nightly format
  #       run: |
  #         cd addons/glecs
  #         pip install regex
  #         python _build_for_nightly.py

  #     - name: üåô Clone nightly branch
  #       run: |
  #         git clone https://github.com/${{ github.repository }} ../nightly_tmp -b nightly
  #         mkdir ../nightly
  #         mkdir ../nightly/.git
  #         cp -r ../nightly_tmp/.git/* ../nightly/.git/

  #     - name: üñ®Ô∏è Copy dev branch plugin to nightly
  #       run: |
  #         cp -r -force ./addons/glecs/* ../nightly/

  #     - name: ‚ûï Add and commit to nightly
  #       id: add-and-commit
  #       continue-on-error: true
  #       run: |
  #         cd ../nightly
  #         git config --global user.name github-actions[bot]
  #         git config --global user.email gslogimaker@gmail.com
  #         git add .
  #         git commit --all -m "(AUTO) ${{ github.event.head_commit.message }}"

  #     - name: üì§ Push to nightly
  #       uses: ad-m/github-push-action@master
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         repository: ${{ github.repository }}
  #         branch: nightly
  #         directory: ../nightly

  #     - name: üèÅ Finish
  #       run: exit 0
