
name: Run Unit Tests

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  LINUX_64_TARGET: x86_64-unknown-linux-gnu

jobs:
  build_linux_x86_64:
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            glecs_lib: libglecs.so

    runs-on: ${{ matrix.os }}

    steps:

    - name: 🐙 Settup git environment
      uses: actions/checkout@v4

    - name: 🗳️ Initialize submodules
      run: git submodule update --init --recursive

    - name: 💾 Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "./addons/glecs/rust/glecs"
        cache-on-failure: true

    - name: 🏗️ Update Rust
      run: |
        rustup update
        rustup target add ${{ matrix.target }}

    - name: 🦀 Build Rust code
      run: |
        cargo build \
          --release \
          --manifest-path ./addons/glecs/rust/glecs/Cargo.toml \
          --features compile_bindings \
          --target-dir ./addons/glecs/bin \
          --target ${{ matrix.target }}
        
        # Copy library for use in test suite
        cp -r ./addons/glecs/bin/${TARGET}/release ./addons/glecs/bin/debug
    
    - name: 🤖 Setup Godot
      uses: chickensoft-games/setup-godot@v1
      with:
        # Version must include major, minor, and patch, and be >= 4.0.0
        version: 4.2.1

      # This shouldn't be needed because the important files from .godot are
      # included, but we run the import process just in case.
    - name: 📧 Run Godot import
      run: |
        godot --headless --editor --quit-after 100

    - name: ✏️ Run unittests
      run: |
        godot -s res://addons/gut/gut_cmdln.gd --headless -gdir="res://unittests" -gexit

    - name: 💾 Cache compiled library
      uses: actions/cache/save@v4.0.2
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: ./addons/glecs/bin/${{ matrix.target }}/release/${{ matrix.glecs_lib }}
        # An explicit key for restoring and saving the cache
        key: glecslib.${{ matrix.target }}
                

  update_nightly:

    needs: build_linux_x86_64
    runs-on: windows-latest

    steps:

        # Run only if new commits were pushed
      - name: 📍 Proceed if action is "push"
        if: ${{ github.action }} != "push"
        run: |
          exit 0

      - name: 🐙 Settup git environment
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      - name: 🐧 Load compiled library, Linux x86_64
        uses: actions/cache/restore@v4.0.2
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: ./addons/glecs/bin/${{ env.LINUX_64_TARGET }}/release/libglecs.so
          # An explicit key for restoring and saving the cache
          key: glecslib.${{ env.LINUX_64_TARGET }}
          # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
          enableCrossOsArchive: true

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5.1.0
        with:
            python-version: 3.11.2
            cache: pip

      - name: 🚣‍♂️ Convert dev plugin to nightly format
        run: |
          cd addons/glecs
          pip install regex
          python _build_for_nightly.py

      - name: 🌙 Clone nightly branch
        run: |
          git clone https://github.com/${{ github.repository }} ../nightly_tmp -b nightly
          mkdir ../nightly
          mkdir ../nightly/.git
          cp -r ../nightly_tmp/.git/* ../nightly/.git/
          cp ../nightly_tmp/README.md ../nightly/README.md
          cp ../nightly_tmp/.gitignore ../nightly/.gitignore
      
      - name: 🖨️ Copy dev branch plugin to nightly
        run: |
          cp -r -force ./addons/glecs/* ../nightly/
      
      - name: ➕ Add / Commit to nightly
        id: add-and-commit
        continue-on-error: true
        run: |
          cd ../nightly
          git config --global user.name github-actions[bot]
          git config --global user.email gslogimaker@gmail.com
          git add .
          git commit --all -m "(AUTO) ${{ github.event.head_commit.message }}"
          # Prevent error
          echo ""

      - name: 📤 Push to nightly
        if: steps.add-and-commit.outcome == 'success'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          branch: nightly
          directory: ../nightly
        
      - name: 🏁 Finish
        run: exit 0