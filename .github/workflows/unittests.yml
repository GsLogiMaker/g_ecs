
name: Run Unit Tests

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]
  workflow_dispatch:

env:
  LINUX_64_TARGET: x86_64-unknown-linux-gnu
  LINUX_64_LIB: libglecs.so

  WINDOWS_64_TARGET: x86_64-pc-windows-gnu
  WINDOWS_64_LIB: libglecs.dll

jobs:
  compile_glecs:
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            glecs_lib: libglecs.so
          # - os: ubuntu-latest
          #   target: x86_64-pc-windows-gnu
          #   glecs_lib: libglecs.dll
          # - os: ubuntu-latest
          #   target: x86_64-pc-windows-gnu
          #   glecs_lib: libglecs.dll

    runs-on: ${{ matrix.os }}

    steps:

    - name: üêô Settup git environment
      uses: actions/checkout@v4

    - name: üó≥Ô∏è Initialize git submodules
      run: git submodule update --init --recursive

    - name: üíæ Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "./addons/glecs/rust/glecs"
        cache-on-failure: true

    - name: üèóÔ∏è Update Rust
      run: |
        rustup update
        rustup target add ${{ matrix.target }}

    - name: ü™ü Install mingw for Windows build
      if: ${{ matrix.target }} == x86_64-pc-windows-gnu
      run: |
        sudo apt install gcc-mingw-w64

    - name: ü¶Ä Build Rust code
      run: |
        cargo build \
          --release \
          --manifest-path ./addons/glecs/rust/glecs/Cargo.toml \
          --features compile_bindings \
          --target-dir ./addons/glecs/bin \
          --target ${{ matrix.target }}
        
        # Copy library for use in test suite
        cp -r ./addons/glecs/bin/${TARGET}/release ./addons/glecs/bin/debug

    - name: üíæ Cache compiled library
      uses: actions/cache/save@v4.0.2
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: ./addons/glecs/bin/${{ matrix.target }}/release/${{ matrix.glecs_lib }}
        # An explicit key for restoring and saving the cache
        key: glecslib.${{ matrix.target }}

  run_godot_test_suite:
      needs: compile_glecs

      strategy:
        matrix:
          include:
            - os: ubuntu-latest
              target: x86_64-unknown-linux-gnu
              glecs_lib: libglecs.so
            # - os: ubuntu-latest
            #   target: x86_64-pc-windows-gnu
            #   glecs_lib: libglecs.dll
            # - os: ubuntu-latest
            #   target: x86_64-pc-windows-gnu
            #   glecs_lib: libglecs.dll
  
      runs-on: ${{ matrix.os }}
  
      steps:
        - name: üêô Settup git environment
          uses: actions/checkout@v4
          
        - name: ‚è≥ Load compiled library
          uses: actions/cache/restore@v4.0.2
          with:
            # A list of files, directories, and wildcard patterns to cache and restore
            path: ./addons/glecs/bin/${{ matrix.target }}/release/${{ matrix.glecs_lib }}
            # An explicit key for restoring and saving the cache
            key: glecslib.${{ matrix.target }}
            # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
            enableCrossOsArchive: true

        - name: ü§ñ Run Godot unit tests
          uses: croconut/godot-tester@v5
          with:
            # required
            version: "4.2"
            is-mono: "false"
            # the folder with your project.godot file in it
            path: "./"
            # the ratio of tests that must pass for this action to pass
            # e.g. 0.6 means 60% of your tests must pass
            minimum-pass: "1.0"
            # the directory containing Gut tests
            test-dir: "res://unittests"
            # default is GUTs default: 'res://.gutconfig.json'; set this to load a different config file
            config-file: "res://.gut_editor_config.json" 
            # relative path to the xml file to read / write GUT's results from, recommended
            # for direct-scene users to check this file if you have issues
            result-output-file: "test_results.xml"

  update_nightly:
    needs: run_godot_test_suite

    runs-on: windows-latest

    steps:

        # Run only if new commits were pushed
      - name: üìç Proceed if action is "push"
        if: ${{ github.action }} != "push"
        run: |
          exit 0

      - name: üêô Settup git environment
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      - name: üêß Load compiled library, Linux x86_64
        uses: actions/cache/restore@v4.0.2
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: ./addons/glecs/bin/${{ env.LINUX_64_TARGET }}/release/${{ env.LINUX_64_LIB }}
          # An explicit key for restoring and saving the cache
          key: glecslib.${{ env.LINUX_64_TARGET }}
          # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
          enableCrossOsArchive: true

      - name: ü™ü Load compiled library, Windows x86_64
        uses: actions/cache/restore@v4.0.2
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: ./addons/glecs/bin/${{ env.WINDOWS_64_TARGET }}/release/${{ env.WINDOWS_64_LIB }}
          # An explicit key for restoring and saving the cache
          key: glecslib.${{ env.WINDOWS_64_TARGET }}
          # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
          enableCrossOsArchive: true

      - name: üêç Setup Python
        uses: actions/setup-python@v5.1.0
        with:
            python-version: 3.11.2
            cache: pip

      - name: üö£‚Äç‚ôÇÔ∏è Convert dev plugin to nightly format
        run: |
          cd addons/glecs
          pip install regex
          python _build_for_nightly.py

      - name: üåô Clone nightly branch
        run: |
          git clone https://github.com/${{ github.repository }} ../nightly_tmp -b nightly
          mkdir ../nightly
          mkdir ../nightly/.git
          cp -r ../nightly_tmp/.git/* ../nightly/.git/
          cp ../nightly_tmp/README.md ../nightly/README.md
          cp ../nightly_tmp/.gitignore ../nightly/.gitignore
      
      - name: üñ®Ô∏è Copy dev branch plugin to nightly
        run: |
          cp -r -force ./addons/glecs/* ../nightly/
      
      - name: ‚ûï Add / Commit to nightly
        id: add-and-commit
        continue-on-error: true
        run: |
          cd ../nightly
          git config --global user.name github-actions[bot]
          git config --global user.email gslogimaker@gmail.com
          git add .
          git commit --all -m "(AUTO) ${{ github.event.head_commit.message }}"
          # Prevent error
          echo ""

      - name: üì§ Push to nightly
        if: steps.add-and-commit.outcome == 'success'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          branch: nightly
          directory: ../nightly
        
      - name: üèÅ Finish
        run: exit 0