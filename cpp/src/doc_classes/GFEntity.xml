<?xml version="1.0" encoding="UTF-8" ?>
<class name="GFEntity" inherits="RefCounted" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		A reference to an entity from a [GFWorld].
	</brief_description>
	<description>
	</description>
	<tutorials>
		<link title="More on Flecs Entities">https://www.flecs.dev/flecs/md_docs_2EntitiesComponents.html</link>
	</tutorials>
	<methods>
		<method name="add" qualifiers="const vararg">
			<return type="GFEntity" />
			<param index="0" name="component" type="Variant" />
			<description>
				Adds component data of type [param component] to this entity. The members of the component data are set by additional arguments after [param component].
				The component's type ID is coerced from a [Variant]. To learn more about [Variant] coercion see [method GFWorld.coerce_id].
				[codeblock]
				var entity:= GFEntity.new()
				entity.add(GFPosition2D, Vector2(10, 10))
				entity.get(GFPosition2D).get_vec() == Vector2(10, 10) # true
				[/codeblock]
				This method returns [code]self[/code] for chaining.
			</description>
		</method>
		<method name="add_child">
			<return type="GFEntity" />
			<param index="0" name="entity" type="Variant" />
			<description>
				Adds a child entity.
				Equivalent to the following:
				[codeblock]
				entity.add_pair("flecs/core/ChildOf", self)
				[/codeblock]
				Example:
				[codeblock]
				var par = GFEntity.new() \
				    .set_name("Parent") \
				    .add_child(
				        GFEntity.new().set_name("Child")
				    )
				par.has_child("Child") # true
				[/codeblock]
				[b]Note:[/b] If [param entity] already has a parent then it will be removed from the old parent and added to this entity.
				This codeblock returns [code]self[/code] for chaining.
			</description>
		</method>
		<method name="add_pair" qualifiers="const vararg">
			<return type="GFEntity" />
			<param index="0" name="first" type="Variant" />
			<param index="1" name="second" type="Variant" />
			<description>
				Adds component data to the pair of [param first] and [param second] to this entity. If the pair contains data, the members of the data are set by additional arguments after [param second].
				The component's type ID is coerced from a [Variant]. To learn more about [Variant] coercion see [method GFWorld.coerce_id].
				[codeblock]
				var entity:= GFEntity.new()
				entity.add_pair(GFPosition2D, Vector2(10, 10))
				entity.get_pair(GFPosition2D).get_vec() == Vector2(10, 10) # true
				[/codeblock]
				This method returns [code]self[/code] for chaining.
			</description>
		</method>
		<method name="add_pairv">
			<return type="GFEntity" />
			<param index="0" name="first" type="Variant" />
			<param index="1" name="second" type="Variant" />
			<param index="2" name="members" type="Array" default="[]" />
			<description>
				Adds component data to the pair of [param first] and [param second] to this entity. If the pair contains data, the members of the data are set using [param members].
				The component's type ID is coerced from a [Variant]. To learn more about [Variant] coercion see [method GFWorld.coerce_id].
				[codeblock]
				var entity:= GFEntity.new()
				entity.add_pairv(GFPosition2D, [Vector2(10, 10)])
				entity.get_pair(GFPosition2D).get_vec() == Vector2(10, 10) # true
				[/codeblock]
				This method returns [code]self[/code] for chaining.
			</description>
		</method>
		<method name="add_tag">
			<return type="GFEntity" />
			<param index="0" name="tag" type="Variant" />
			<description>
				Adds a tag to this entity.
				[codeblock]
				var carnivore:= GFEntity.new().set_name("Carnivore")
				var tiger:= GFEntity.new().set_name("Tiger")

				tiger.add_tag(carnivore)
				[/codeblock]
			</description>
		</method>
		<method name="addv">
			<return type="GFEntity" />
			<param index="0" name="component" type="Variant" />
			<param index="1" name="members" type="Array" default="[]" />
			<description>
				Adds component data of type [param component] to this entity. The members of the component data are set using [param members].
				The component's type ID is coerced from a [Variant]. To learn more about [Variant] coercion see [method GFWorld.coerce_id].
				[codeblock]
				var entity:= GFEntity.new()
				entity.addv(GFPosition2D, [Vector2(10, 10)])
				entity.get(GFPosition2D).get_vec() == Vector2(10, 10) # true
				[/codeblock]
				This method returns [code]self[/code] for chaining.
			</description>
		</method>
		<method name="delete" qualifiers="const">
			<return type="void" />
			<description>
				Deletes the entity this [GFEntity] is referencing.
				[codeblock]
				var entity:= GFEntity.new()
				entity.is_alive() # true
				entity.delete()
				entity.is_alive() # false
				[/codeblock]
			</description>
		</method>
		<method name="emit">
			<return type="GFEntity" />
			<param index="0" name="entity" type="Variant" />
			<param index="1" name="components" type="Array" />
			<param index="2" name="event_members" type="Array" default="[]" />
			<description>
				Triggers this entity to emit as an event to be cought by observers.
				TODO: Add code example.
			</description>
		</method>
		<method name="from" qualifiers="static">
			<return type="GFEntity" />
			<param index="0" name="entity" type="Variant" />
			<param index="1" name="world" type="GFWorld" default="null" />
			<description>
				Returns an entity from an ID coerced from a [Variant].
				If no world is specified, a default world is used.
				To learn more about [Variant] coercion see [method GFWorld.coerce_id].
				[codeblock]
				var entity:= GFEntity.from("flecs/core/OnAdd")
				[/codeblock]
			</description>
		</method>
		<method name="from_id" qualifiers="static">
			<return type="GFEntity" />
			<param index="0" name="id" type="int" />
			<param index="1" name="world" type="GFWorld" default="null" />
			<description>
				Returns an entity from an ID.
				If no world is specified, a default world is used.
				[codeblock]
				var entity:= GFEntity.from_id(255)
				[/codeblock]
			</description>
		</method>
		<method name="get" qualifiers="const">
			<return type="GFComponent" />
			<param index="0" name="component" type="Variant" />
			<description>
				Returns a reference to this entity's component's data of type [param component].
				Returns [code]null[/code] if the entity does not have the [param component] attached or if [param component] is not a component. The component is identified by an ID coerced from a [Variant]. To learn more about [Variant] coercion see [method GFWorld.coerce_id].
				[codeblock]
				var entity:= GFEntity.new()
				entity.add("glecs/meta/Array")
				entity.get("glecs/meta/Array") != null # true
				[/codeblock]
			</description>
		</method>
		<method name="get_child" qualifiers="const">
			<return type="GFEntity" />
			<param index="0" name="path" type="String" />
			<description>
				Returns a reference to a child entity of this entity.
				[codeblock]
				var par = GFEntity.new() \
				    .set_name("Parent") \
				    .add_child(
				        GFEntity.new().set_name("Child")
				    )
				par.get_child("Child") != null # true
				[/codeblock&gt;
			</description>
		</method>
		<method name="get_id" qualifiers="const">
			<return type="int" />
			<description>
				Returns the ID of this entity.
				[codeblock]
				var entity:= GFEntity.from_id(42)
				entity.get_id() == 42 # true
				[/codeblock]
			</description>
		</method>
		<method name="get_name" qualifiers="const">
			<return type="String" />
			<description>
				Returns the name of this entity.
				[codeblock]
				var entity:= GFEntity.new()
				entity.set_name("Entity")
				entity.get_name() == "Entity" # true
				[/codeblock]
			</description>
		</method>
		<method name="get_pair" qualifiers="const">
			<return type="GFComponent" />
			<param index="0" name="first" type="Variant" />
			<param index="1" name="second" type="Variant" />
			<description>
				Returns a reference to this entity's component's data in the pair
				of [param first] and [param second].
				Returns [code]null[/code] if the entity does not have the [param component] attached or if [param component] is not a component. The component is identified by an ID coerced from a [Variant]. To learn more about [Variant] coercion see [method GFWorld.coerce_id].
				[codeblock]
				var entity:= GFEntity.new()
				entity.add("glecs/meta/Array")
				entity.get("glecs/meta/Array") != null # true
				[/codeblock]
			</description>
		</method>
		<method name="get_parent" qualifiers="const">
			<return type="GFEntity" />
			<description>
				Returns this enitty's parent entity, or [code]null[/code] if the entity doesn't have a parent.
				Example:
				[codeblock]
				var child:= GFEntity.new() \
				    .set_name("Child") \
				    .set_parent(
				        GFEntity.new().set_name("Parent")
				    )
				child.get_parent().get_name() == "Parent" # true
				[/codeblock]
			</description>
		</method>
		<method name="get_path" qualifiers="const">
			<return type="String" />
			<description>
				Returns this entity's path in the tree.
				[codeblock]
				var entity:= GFGlobalWorld.lookup("flecs/core/OnAdd")
				entity.get_path() == "flecs/core/OnAdd"
				[/codeblock]
			</description>
		</method>
		<method name="get_world" qualifiers="const">
			<return type="GFWorld" />
			<description>
				Returns the world this entity is from.
				[codeblock]
				var world:= GFWorld.new()
				var entity:= GFEntity.new_in_world(world)
				entity.get_world() == world # true
				[/codeblock]
			</description>
		</method>
		<method name="has_child" qualifiers="const">
			<return type="bool" />
			<param index="0" name="path" type="String" />
			<description>
				Returns [code]true[/code] [param path] points to a valid entity.
				[codeblock]
				var par = GFEntity.new() \
				    .set_name("Parent") \
				    .add_child(
				        GFEntity.new().set_name("Child")
				    )
				par.has_child("Child") # true
				[/codeblock]
			</description>
		</method>
		<method name="has_entity" qualifiers="const">
			<return type="bool" />
			<param index="0" name="entity" type="Variant" />
			<description>
				Returns [code]true[/code] if [param entity] wass added to this entity.
				[codeblock]
				var enemy = GFEntity.new()
				var robot:= GFEntity.new() \
				    .add_tag(enemy)
				robot.has_entity(enemy) # true
				[/codeblock]
			</description>
		</method>
		<method name="has_pair" qualifiers="const">
			<return type="bool" />
			<param index="0" name="first" type="Variant" />
			<param index="1" name="second" type="Variant" />
			<description>
				Returns [code]true[/code] if the pair of [param first] and [param second] was added to this entity.
				[codeblock]
				var eats:= GFEntity.new()
				var grass:= GFEntity.new()
				var cow:= GFEntity.new() \
				    .add_pair(eats, grass)
				entity.has_pair(eats, grass) # true
				[/codeblock]
			</description>
		</method>
		<method name="is_alive" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if this entity is still alive.
				[codeblock]
				var entity:= GFEntity.new()
				entity.is_alive() # true
				entity.delete()
				entity.is_alive() # false
				[/codeblock]
			</description>
		</method>
		<method name="is_pair" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the ID of this entity is a pair.
				[codeblock]
				var world:= GFWorld.new()
				var entity:= GFEntity.from_id(world.pair_ids(1, 2), world)
				entity.is_pair() # true
				[/codeblock]
			</description>
		</method>
		<method name="iter_children" qualifiers="const">
			<return type="GFEntityIterator" />
			<description>
			</description>
		</method>
		<method name="new_in_world" qualifiers="static">
			<return type="GFEntity" />
			<param index="0" name="world" type="GFWorld" />
			<description>
				Returns a reference to a new entity created within [param world].
				[codeblock]
				var world:= GFWorld.new()
				var entity:= GFEntity.new_in_world(world)
				[/codeblock]
			</description>
		</method>
		<method name="pair" qualifiers="const">
			<return type="GFPair" />
			<param index="0" name="second" type="Variant" />
			<description>
				Creates a [GFPair] from this entity and [param second].
				[codeblock]
				var Eats:= GFEntity.new()
				var Grass:= GFEntity.new()
				var EatsGrass:GFPair = Eats.pair(Grass)
				[/codeblock]
			</description>
		</method>
		<method name="pair_id" qualifiers="const">
			<return type="int" />
			<param index="0" name="second_id" type="int" />
			<description>
				Creates a pair ID from this entity and [param second_id].
				[codeblock]
				var Eats:= GFEntity.new()
				var Grass:= GFEntity.new()
				var EatsGrass_id:int = Eats.pair_id(Grass.get_id())
				[/codeblock]
			</description>
		</method>
		<method name="set" qualifiers="const vararg">
			<return type="GFEntity" />
			<param index="0" name="component" type="Variant" />
			<description>
				Sets the [param component] in this entity. The members of the component data are set by additional arguments after [param component].
				The component's type ID is coerced from a [Variant]. To learn more about [Variant] coercion see [method GFWorld.coerce_id].
				[codeblock]
				var entity:= GFEntity.new()
				entity.add(GFPosition2D)
				entity.set(GFPosition2D, Vector2(10, 10))
				entity.get(GFPosition2D).get_vec() == Vector2(10, 10) # true
				[/codeblock]
				If the component is not added yet, then this method will add
				it automaticly.
				[codeblock]
				var entity:= GFEntity.new()
				entity.set(GFPosition2D, Vector2(10, 10))
				entity.get(GFPosition2D).get_vec() == Vector2(10, 10) # true
				[/codeblock]
				This method returns [code]self[/code] for chaining.
			</description>
		</method>
		<method name="set_name">
			<return type="GFEntity" />
			<param index="0" name="name" type="String" />
			<description>
				Sets the name of this entity.
				[codeblock]
				var entity:= GFEntity.new()
				entity.set_name("Entity")
				entity.get_name() == "Entity" # true
				[/codeblock]
				This method returns [code]self[/code] for chaining.
			</description>
		</method>
		<method name="set_pair" qualifiers="const vararg">
			<return type="GFEntity" />
			<param index="0" name="first" type="Variant" />
			<param index="1" name="second" type="Variant" />
			<description>
				Sets the component of the pair of [param first] and [param second] in this entity. The members of the component data are set by additional arguments after [param second].
				The component's type ID is coerced from a [Variant]. To learn more about [Variant] coercion see [method GFWorld.coerce_id].
				[codeblock]
				var start:= GFEntity.new().set_name("Start")
				var entity:= GFEntity.new()
				# Pair will be added if it is not already.
				entity.set_pair(start, GFPosition2D, Vector2(10, 10))
				entity.get_pair(start, GFPosition2D).get_vec() == Vector2(10, 10) # true
				[/codeblock]
				This method returns [code]self[/code] for chaining.
			</description>
		</method>
		<method name="set_pairv">
			<return type="GFEntity" />
			<param index="0" name="first" type="Variant" />
			<param index="1" name="second" type="Variant" />
			<param index="2" name="members" type="Array" />
			<description>
				Sets the component of the pair of [param first] and [param second] in this entity. The members of the component data are set by [param members].
				The component's type ID is coerced from a [Variant]. To learn more about [Variant] coercion see [method GFWorld.coerce_id].
				[codeblock]
				var start:= GFEntity.new().set_name("Start")
				var entity:= GFEntity.new()
				# Pair will be added if it is not already.
				entity.set_pairv(start, GFPosition2D, [Vector2(10, 10)])
				entity.get_pair(start, GFPosition2D).get_vec() == Vector2(10, 10) # true
				[/codeblock]
				This method returns [code]self[/code] for chaining.
			</description>
		</method>
		<method name="set_parent">
			<return type="GFEntity" />
			<param index="0" name="entity" type="Variant" />
			<description>
				Set this entity as a child of [param entity].
				Equivalent to the following:
				[codeblock]
				self.add_pair("flecs/core/ChildOf", entity)
				[/codeblock]
				Example:
				[codeblock]
				var par = GFEntity.new().set_name("Parent")
				GFEntity.new() \
				    .set_name("Child") \
				    .set_parent(par)
				par.has_child("Child") # true
				[/codeblock]
				This codeblock returns [code]self[/code] for chaining.
			</description>
		</method>
		<method name="setv">
			<return type="GFEntity" />
			<param index="0" name="component" type="Variant" />
			<param index="1" name="members" type="Array" />
			<description>
				Sets the [param component] in this entity. The members of the component data are set by [param members].
				The component's type ID is coerced from a [Variant]. To learn more about [Variant] coercion see [method GFWorld.coerce_id].
				[codeblock]
				var entity:= GFEntity.new()
				entity.add(GFPosition2D)
				entity.setv(GFPosition2D, [Vector2(10, 10)])
				entity.get(GFPosition2D).get_vec() == Vector2(10, 10) # true
				[/codeblock]
				If the component is not added yet, then this method will add
				it automaticly.
				[codeblock]
				var entity:= GFEntity.new()
				entity.setv(GFPosition2D, [Vector2(10, 10)])
				entity.get(GFPosition2D).get_vec() == Vector2(10, 10) # true
				[/codeblock]
				This method returns [code]self[/code] for chaining.
			</description>
		</method>
	</methods>
</class>
